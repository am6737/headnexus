// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// Create a new host
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// Update a host
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// Create an enroll host
	// (POST /api/v1/hosts/{hostId}/enroll)
	CreateEnroll(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// createRule
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
	// Change user password
	// (POST /api/v1/user/change-password)
	ChangePassword(c *gin.Context)
	// User login
	// (POST /api/v1/user/login)
	LoginUser(c *gin.Context)
	// User registration
	// (POST /api/v1/user/register)
	RegisterUser(c *gin.Context)
	// Verify verification code
	// (POST /api/v1/user/verify-code)
	VerifyCode(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// CreateEnroll operation middleware
func (siw *ServerInterfaceWrapper) CreateEnroll(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnroll(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// VerifyCode operation middleware
func (siw *ServerInterfaceWrapper) VerifyCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyCode(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll", wrapper.CreateEnroll)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
	router.POST(options.BaseURL+"/api/v1/user/change-password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.LoginUser)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/api/v1/user/verify-code", wrapper.VerifyCode)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JsPkPwEAAP//6jtdVx45AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
