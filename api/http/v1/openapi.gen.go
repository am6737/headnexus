// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// 创建主机
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// 注册主机
	// (POST /api/v1/hosts/enroll/{code})
	EnrollHost(c *gin.Context, code string)
	// 删除主机
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// 更新主机
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// 获取主机配置
	// (GET /api/v1/hosts/{hostId}/config)
	GetHostConfig(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// 获取主机规则
	// (GET /api/v1/hosts/{hostId}/rules)
	ListHostRules(c *gin.Context, hostId string, params ListHostRulesParams)
	// 添加主机规则
	// (POST /api/v1/hosts/{hostId}/rules)
	AddHostRule(c *gin.Context, hostId string)
	// 删除主机规则
	// (DELETE /api/v1/hosts/{hostId}/rules/{ruleId})
	DeleteHostRule(c *gin.Context, hostId string, ruleId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// 创建规则
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
	// 更改用户密码
	// (POST /api/v1/users/change-password)
	ChangePassword(c *gin.Context)
	// 用户登录
	// (POST /api/v1/users/login)
	LoginUser(c *gin.Context)
	// 获取当前用户信息
	// (GET /api/v1/users/me)
	GetUserInfo(c *gin.Context)
	// 用户注册
	// (POST /api/v1/users/register)
	RegisterUser(c *gin.Context)
	// 发送验证码
	// (POST /api/v1/users/send-code)
	SendCode(c *gin.Context)
	// 验证验证码
	// (GET /api/v1/users/verify-code)
	VerifyCode(c *gin.Context, params VerifyCodeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// EnrollHost operation middleware
func (siw *ServerInterfaceWrapper) EnrollHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", c.Param("code"), &code, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EnrollHost(c, code)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// GetHostConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHostConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostConfig(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// ListHostRules operation middleware
func (siw *ServerInterfaceWrapper) ListHostRules(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostRulesParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHostRules(c, hostId, params)
}

// AddHostRule operation middleware
func (siw *ServerInterfaceWrapper) AddHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddHostRule(c, hostId)
}

// DeleteHostRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", c.Param("ruleId"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHostRule(c, hostId, ruleId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserInfo(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// SendCode operation middleware
func (siw *ServerInterfaceWrapper) SendCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendCode(c)
}

// VerifyCode operation middleware
func (siw *ServerInterfaceWrapper) VerifyCode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyCodeParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyCode(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/enroll/:code", wrapper.EnrollHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/config", wrapper.GetHostConfig)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.ListHostRules)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.AddHostRule)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId/rules/:ruleId", wrapper.DeleteHostRule)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
	router.POST(options.BaseURL+"/api/v1/users/change-password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/api/v1/users/login", wrapper.LoginUser)
	router.GET(options.BaseURL+"/api/v1/users/me", wrapper.GetUserInfo)
	router.POST(options.BaseURL+"/api/v1/users/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/api/v1/users/send-code", wrapper.SendCode)
	router.GET(options.BaseURL+"/api/v1/users/verify-code", wrapper.VerifyCode)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
