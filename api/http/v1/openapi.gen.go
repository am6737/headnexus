// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// Create a new host
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// Update a host
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// Create an enroll host
	// (POST /api/v1/hosts/{hostId}/enroll)
	CreateEnroll(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// 获取主机规则
	// (GET /api/v1/hosts/{hostId}/rules)
	ListHostRules(c *gin.Context, hostId string, params ListHostRulesParams)
	// 添加主机规则
	// (POST /api/v1/hosts/{hostId}/rules)
	AddHostRule(c *gin.Context, hostId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// createRule
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
	// Change user password
	// (POST /api/v1/users/change-password)
	ChangePassword(c *gin.Context)
	// 用户登录
	// (POST /api/v1/users/login)
	LoginUser(c *gin.Context)
	// 获取当前用户信息
	// (GET /api/v1/users/me)
	GetUserInfo(c *gin.Context)
	// User registration
	// (POST /api/v1/users/register)
	RegisterUser(c *gin.Context)
	// 发送验证码
	// (POST /api/v1/users/send-code)
	SendCode(c *gin.Context)
	// Verify verification code
	// (POST /api/v1/users/verify-code)
	VerifyCode(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// CreateEnroll operation middleware
func (siw *ServerInterfaceWrapper) CreateEnroll(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnroll(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// ListHostRules operation middleware
func (siw *ServerInterfaceWrapper) ListHostRules(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostRulesParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHostRules(c, hostId, params)
}

// AddHostRule operation middleware
func (siw *ServerInterfaceWrapper) AddHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddHostRule(c, hostId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserInfo(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// SendCode operation middleware
func (siw *ServerInterfaceWrapper) SendCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendCode(c)
}

// VerifyCode operation middleware
func (siw *ServerInterfaceWrapper) VerifyCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyCode(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll", wrapper.CreateEnroll)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.ListHostRules)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.AddHostRule)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
	router.POST(options.BaseURL+"/api/v1/users/change-password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/api/v1/users/login", wrapper.LoginUser)
	router.GET(options.BaseURL+"/api/v1/users/me", wrapper.GetUserInfo)
	router.POST(options.BaseURL+"/api/v1/users/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/api/v1/users/send-code", wrapper.SendCode)
	router.POST(options.BaseURL+"/api/v1/users/verify-code", wrapper.VerifyCode)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbW28bx/X/Kov55yEGSFGkbOMfviSKHTsqXEeQ4uRBYoXR7iE50e7MembWNqsQqIui",
	"cIO0btELEsBoYyBojAJFihaFixhBvkwo29+imJm9cS8kJe7SdtsXibs7O5ffOXMuvzl7jGzm+YwClQJ1",
	"j5Gwh+Bh/fPSENMBbGMhbjPu7MDNAIRUD3zOfOCSgG5G4faBHzZS13AHe74LqDv1pN3ZQA3UZ9zDEnVR",
	"/EIDyZGvGgvJCR2gcQMx1ynpMP3EdJh5eRzfYYcfgS1Vd5eGYB+9Qzlz3UvMgR0QPqMC8guBO0QYEBwQ",
	"Nie+JIyiLpr8+acnf3ww+etnkwePnj189PTLb55999nJ3x+e/OPR5OefJpM4ZMwFTEtmwQFLWGQaNnMg",
	"P4n3h2CBftvSDbJLb6A7zQFrqptNcUT8JtNvYrfpM0IlcNSVPADVjHlEgufLEer2sStg3EAu6YMkHhwI",
	"sBl19DxiWREqL55PBlS9DYAvNWI5QtdB3mb8KKVtsfiPkU0cjrqo/UZnrX3x/9faa+utjpoZxZ7q6x3T",
	"MuxC9ZlBVr+eRfbS1uUdizKJ1bXF+pYcgkVNHxZ2HA5CWJg6lggOKUjLw+LIeh3WBmsNaz8zl310DjWQ",
	"j6UErvr+0etvdvfWm2/0jtuNjfH+/tq5441xcqMV/eyMX6tYogaS7FqvYw8yS0QN5OE714AO5BB1Oxcu",
	"NJBHaHTdrnJW4wbicDMgHBzU3TPi6M3XhGSjvHqqUKVIbQ2Ls6l3RZUdEycPxdblvJ68KP2sVANz2naF",
	"UOc93YXIG+M+cSXwAqdwRT+wWPhitt8lBeIfhNpWOvDhyNrajnSyYtkQceCSwVAOWSBg1gySVpaQWAYi",
	"7wyX9UsekWYGfRy4EnXb642szgTeoZJE3+IgAlcKSzKLgww4rdZplSltgod+XvE+MbvgoGiPpgYObdTW",
	"5YqHZ/2+gGkJ5ATwnm5j9Rm3fDwgVFvPqqHnzJ0JvX5e7doF4zI/5C7jktBBLTu/yDy9y4qC7tAXHOAV",
	"O4Ohmk3F1mbK2NVqx6q1TVjIAwFAaxBCZGhWFZll7czZe8Y+aaoEZQC0CXckx02JB1qyh4Q6qrduEgSO",
	"y6wOdQkt2O4fDkEOgceaaBFhmbYW4ypwq9r/+KEJqMWUAQ08FQdTRpXpSqlqr2JDpgJaO9plUBBUbFou",
	"EVJtctPWittqs57a+arzgo2aWC7MOR4tOeFIZbDjEPPadsr6mRcrtbrptESLpygtucYGhJbSIOBh4k7T",
	"FYEA/lZ4uWYzL02AmOYF7Ecx83FqGqXIlUTZUN6bvLrZUGh8MzNXz9SkJfFASOz5Vfus/+qMaQcGREjg",
	"p9kL7c7GWzdvLrwLosWmyMSi2Lre/bITuAX8HLYN9KmQGGHXZbdRIzbp0bUDdFS1NS8M/arxTFOqVW1E",
	"4xAOBcAResgC6qSgS+6wQJqfFQM4DCPq2JWl+br9fSfN1UWXr7fCJ53xx3vtTk9ddMYfb+ytNzu9c+fe",
	"fK1INSv0iGrOS8dmZXasDitVZZ+ZKKyaPjmTLB2FYapkJG3lKgJH/SW251ete6avF7sDMvGO7jgEOcKl",
	"EVm5XolZnEmapZR12lmpXLZ6jsLHAzjQ2KV5oixLsY0HYFHNFVXNTegJCPJjeFmYqiJndkMA36J9NsNb",
	"5wxYkXmIMl9XRcOFqW9WwYhW7tDTT79bpF4fACf9kTkjK4kvoiOy2N+3OxvnL1wsMMHLRiJ5JFU+BXbA",
	"iRzt2kPwzIzeBsyBbwYqMz9Gh/rqStT3Dz58HzXMyapOTfXTZKyhlD4aq45JKJ9Mcra9pbMwD1M8IHRg",
	"jVjArVuEywC71rXN66orIvXiPkjuWj9U7cEDKq3N7S3UQLeAC9Nle219bV2ftfpAsU9QF23oW/rwaqiX",
	"1MI+ad1qt9Ru1jcGhghUgtDR9ZaDuugaEfJdkxr6mGMPDF2+l11EaCz0QgypTuigYQnDpjV0HjHFHhL1",
	"1s0A+Cg51emnrE4IKFZTeo1DH3XR/7WSs+xWeJDdSluq8binVNMcKOk1ddbXjUJRCVQvD/u+S2w9i9ZH",
	"wsQryUhxzDBrSI1H1v9rAWeoxMC2QYh+4FrRpKb0S8OY1qy9nlqACDwP81EIvoVd1zIyihLnPRPi9LTr",
	"FAVCMwdsodi42WVvM2d0Kiimt+SsI4sXdVCxu7WbOqKomhsqzse0i1vxOUCY11vEqdqzFjLgeomuygCp",
	"skZh4FDluMVkvx43jFYqHS1wQx1eBbc1n4zbzVBwq2HdCjydceRLWMv5RjJvFE8eP5l88sX3/3py8uCb",
	"01lDY9UsbFG4HR9UTBvEcWParbWO1b8tZ2yk4IKEvLW8rO8XOzntpZTLTJyU6RGlYyADeoJLNsgo8UoL",
	"eosYADNRC5csvlHswa+CfAFrq1WHlnasV0HOgNEPCmC84Tt4BVpyNl+9CIjjl0lQsSQMrKXCKN3QLVMs",
	"pwOVGTGQKch7CSVWnPDMTrR0q16BHc/OeVlRLzS5s1UVFvqhyvd35CpoVFN5Nu1qRkufr2KXTNHmK2di",
	"S+tWVyKWqNT1DGJp2kOwj2YIZ7os+H8moEKdKam4rk5lFlaIOLafSV7s6Fan0oAEiekFmcCVFJ4wZds+",
	"f/jPp1/cLeE6YlZzeqyE3swbzoL+J19+Nfnb/VlDaN6yeIz1gkF6lbqOfOo1S6/0eVyeV1nAYTz71ePJ",
	"/T8Y2Tz76meTe5+f3Pv15JM/nc485XtZnHLZdJxI02pXtMpszioz43GJ0ZqXFqXzxYxop9+ngeueQtj5",
	"fmc6opCfKbc1V0Fuuu71+Ij+P5GGjEFIkIpqEuaRkWlgqs9xCr8tqTnnKf6KoT7GI0Ewj32BoraOw18L",
	"sR9J5/NNV9zvkkHs+So5kLQelu3P6hdZ9dc39cb68dcytTEqdIaOzuRVVqR/1VueFKbjl0x0eY6FLmZC",
	"5gfVxWFODSeCPFOLsOipYLaGYUUngyURbI0umYepTSRQdT3XGYfiq2M/GASW3wwvF9x2GrYM1NmN0zom",
	"i3jchTMFssqzhkUBcdJrKAckEMBFy9YfmjfTlZxlnE36i/S6YsXCz94XolDO14CkmY6lkLLS5ashpup+",
	"Eaa6xKYcSV3LfkPoMpQ6QJyqla+dgZbsCGgxOTaXGnj6+ZPJt79P0wEx9E9/9+jk3mPTYAHITTlAWXAZ",
	"11/VGAXEY5RSIJNvfzv5xS/Nwr7/7uHJ3a/PToTk+1oAJB7WjperZlRdXqN2ZgvYK9/cSWiltq1ZM4+/",
	"i5wDkQDqzDlZ2AXqhKx1NUxPXCe3QEFcmm82rc5GOJ8J0Mn93zz/yd3nf/n02dd3DXk6D85bup5wDqBJ",
	"0WFNKpevaqwPIzOWpRcezjZ7khKBpXc9vxWFFwF3w4LEbqs1YgFvYp80A+7qcslxb/zvAAAA///EY5vk",
	"L0YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
