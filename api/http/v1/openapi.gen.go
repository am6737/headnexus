// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// Create a new host
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// Update a host
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// Create an enroll host
	// (POST /api/v1/hosts/{hostId}/enroll)
	CreateEnroll(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// createRule
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// CreateEnroll operation middleware
func (siw *ServerInterfaceWrapper) CreateEnroll(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnroll(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll", wrapper.CreateEnroll)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
