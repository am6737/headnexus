// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// Create a new host
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// Update a host
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// Create an enroll host
	// (POST /api/v1/hosts/{hostId}/enroll)
	CreateEnroll(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// 获取主机规则
	// (GET /api/v1/hosts/{hostId}/rules)
	ListHostRules(c *gin.Context, hostId string, params ListHostRulesParams)
	// 添加主机规则
	// (POST /api/v1/hosts/{hostId}/rules)
	AddHostRule(c *gin.Context, hostId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// createRule
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
	// Change user password
	// (POST /api/v1/users/change-password)
	ChangePassword(c *gin.Context)
	// 用户登录
	// (POST /api/v1/users/login)
	LoginUser(c *gin.Context)
	// 获取当前用户信息
	// (GET /api/v1/users/me)
	GetUserInfo(c *gin.Context)
	// User registration
	// (POST /api/v1/users/register)
	RegisterUser(c *gin.Context)
	// 发送验证码
	// (POST /api/v1/users/send-code)
	SendCode(c *gin.Context)
	// Verify verification code
	// (GET /api/v1/users/verify-code)
	VerifyCode(c *gin.Context, params VerifyCodeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// CreateEnroll operation middleware
func (siw *ServerInterfaceWrapper) CreateEnroll(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnroll(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// ListHostRules operation middleware
func (siw *ServerInterfaceWrapper) ListHostRules(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostRulesParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHostRules(c, hostId, params)
}

// AddHostRule operation middleware
func (siw *ServerInterfaceWrapper) AddHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddHostRule(c, hostId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserInfo(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// SendCode operation middleware
func (siw *ServerInterfaceWrapper) SendCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendCode(c)
}

// VerifyCode operation middleware
func (siw *ServerInterfaceWrapper) VerifyCode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyCodeParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyCode(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll", wrapper.CreateEnroll)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.ListHostRules)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.AddHostRule)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
	router.POST(options.BaseURL+"/api/v1/users/change-password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/api/v1/users/login", wrapper.LoginUser)
	router.GET(options.BaseURL+"/api/v1/users/me", wrapper.GetUserInfo)
	router.POST(options.BaseURL+"/api/v1/users/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/api/v1/users/send-code", wrapper.SendCode)
	router.GET(options.BaseURL+"/api/v1/users/verify-code", wrapper.VerifyCode)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pxpUo73o3wEAAP//tyAu8/ZGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
