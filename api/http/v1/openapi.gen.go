// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// 创建主机
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// 注册主机
	// (POST /api/v1/hosts/enroll/{code})
	EnrollHost(c *gin.Context, code string)
	// 删除主机
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// Update a host
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// 获取主机配置
	// (GET /api/v1/hosts/{hostId}/config)
	GetHostConfig(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// 获取主机规则
	// (GET /api/v1/hosts/{hostId}/rules)
	ListHostRules(c *gin.Context, hostId string, params ListHostRulesParams)
	// 添加主机规则
	// (POST /api/v1/hosts/{hostId}/rules)
	AddHostRule(c *gin.Context, hostId string)
	// 删除主机规则
	// (DELETE /api/v1/hosts/{hostId}/rules/{ruleId})
	DeleteHostRule(c *gin.Context, hostId string, ruleId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// createRule
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
	// 更改用户密码
	// (POST /api/v1/users/change-password)
	ChangePassword(c *gin.Context)
	// 用户登录
	// (POST /api/v1/users/login)
	LoginUser(c *gin.Context)
	// 获取当前用户信息
	// (GET /api/v1/users/me)
	GetUserInfo(c *gin.Context)
	// 用户注册
	// (POST /api/v1/users/register)
	RegisterUser(c *gin.Context)
	// 发送验证码
	// (POST /api/v1/users/send-code)
	SendCode(c *gin.Context)
	// 验证验证码
	// (GET /api/v1/users/verify-code)
	VerifyCode(c *gin.Context, params VerifyCodeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// EnrollHost operation middleware
func (siw *ServerInterfaceWrapper) EnrollHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", c.Param("code"), &code, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EnrollHost(c, code)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// GetHostConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHostConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostConfig(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// ListHostRules operation middleware
func (siw *ServerInterfaceWrapper) ListHostRules(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostRulesParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHostRules(c, hostId, params)
}

// AddHostRule operation middleware
func (siw *ServerInterfaceWrapper) AddHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddHostRule(c, hostId)
}

// DeleteHostRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", c.Param("ruleId"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHostRule(c, hostId, ruleId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserInfo(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// SendCode operation middleware
func (siw *ServerInterfaceWrapper) SendCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendCode(c)
}

// VerifyCode operation middleware
func (siw *ServerInterfaceWrapper) VerifyCode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyCodeParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyCode(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/enroll/:code", wrapper.EnrollHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/config", wrapper.GetHostConfig)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.ListHostRules)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.AddHostRule)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId/rules/:ruleId", wrapper.DeleteHostRule)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
	router.POST(options.BaseURL+"/api/v1/users/change-password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/api/v1/users/login", wrapper.LoginUser)
	router.GET(options.BaseURL+"/api/v1/users/me", wrapper.GetUserInfo)
	router.POST(options.BaseURL+"/api/v1/users/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/api/v1/users/send-code", wrapper.SendCode)
	router.GET(options.BaseURL+"/api/v1/users/verify-code", wrapper.VerifyCode)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
