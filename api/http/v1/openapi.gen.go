// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// Create a new host
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// Update a host
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// Create an enroll host
	// (POST /api/v1/hosts/{hostId}/enroll)
	CreateEnroll(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// createRule
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
	// Change user password
	// (POST /api/v1/user/change-password)
	ChangePassword(c *gin.Context)
	// User login
	// (POST /api/v1/user/login)
	LoginUser(c *gin.Context)
	// User registration
	// (POST /api/v1/user/register)
	RegisterUser(c *gin.Context)
	// 发送验证码
	// (POST /api/v1/user/send-code)
	SendCode(c *gin.Context)
	// Verify verification code
	// (POST /api/v1/user/verify-code)
	VerifyCode(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameter("simple", false, "hostId", c.Param("hostId"), &hostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameter("simple", false, "hostId", c.Param("hostId"), &hostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameter("simple", false, "hostId", c.Param("hostId"), &hostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// CreateEnroll operation middleware
func (siw *ServerInterfaceWrapper) CreateEnroll(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameter("simple", false, "hostId", c.Param("hostId"), &hostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnroll(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameter("simple", false, "hostId", c.Param("hostId"), &hostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameter("simple", false, "hostId", c.Param("hostId"), &hostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameter("simple", false, "networkId", c.Param("networkId"), &networkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameter("simple", false, "networkId", c.Param("networkId"), &networkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameter("simple", false, "networkId", c.Param("networkId"), &networkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// SendCode operation middleware
func (siw *ServerInterfaceWrapper) SendCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendCode(c)
}

// VerifyCode operation middleware
func (siw *ServerInterfaceWrapper) VerifyCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyCode(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll", wrapper.CreateEnroll)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
	router.POST(options.BaseURL+"/api/v1/user/change-password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/api/v1/user/login", wrapper.LoginUser)
	router.POST(options.BaseURL+"/api/v1/user/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/api/v1/user/send-code", wrapper.SendCode)
	router.POST(options.BaseURL+"/api/v1/user/verify-code", wrapper.VerifyCode)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//8gdehfXjoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
