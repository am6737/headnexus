// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	ListHost(c *gin.Context, params ListHostParams)
	// 创建主机
	// (POST /api/v1/hosts)
	CreateHost(c *gin.Context)
	// 注册主机
	// (POST /api/v1/hosts/enroll/{code})
	EnrollHost(c *gin.Context, code string)
	// 删除主机
	// (DELETE /api/v1/hosts/{hostId})
	DeleteHost(c *gin.Context, hostId string)
	// Get a host
	// (GET /api/v1/hosts/{hostId})
	GetHost(c *gin.Context, hostId string)
	// 更新主机
	// (PUT /api/v1/hosts/{hostId})
	UpdateHost(c *gin.Context, hostId string)
	// 获取主机配置
	// (GET /api/v1/hosts/{hostId}/config)
	GetHostConfig(c *gin.Context, hostId string)
	// Create an enroll code
	// (POST /api/v1/hosts/{hostId}/enroll-code)
	CreateEnrollCode(c *gin.Context, hostId string)

	// (POST /api/v1/hosts/{hostId}/enroll-code-check)
	CheckEnrollCode(c *gin.Context, hostId string)
	// 获取主机规则
	// (GET /api/v1/hosts/{hostId}/rules)
	ListHostRules(c *gin.Context, hostId string, params ListHostRulesParams)
	// 添加主机规则
	// (POST /api/v1/hosts/{hostId}/rules)
	AddHostRule(c *gin.Context, hostId string)
	// 删除主机规则
	// (DELETE /api/v1/hosts/{hostId}/rules/{ruleId})
	DeleteHostRule(c *gin.Context, hostId string, ruleId string)
	// List all networks
	// (GET /api/v1/networks)
	GetAllNetwork(c *gin.Context)
	// Create a new Network
	// (POST /api/v1/networks)
	CreateNetwork(c *gin.Context)
	// Delete a host
	// (DELETE /api/v1/networks/{networkId})
	DeleteNetwork(c *gin.Context, networkId string)
	// Get a network
	// (GET /api/v1/networks/{networkId})
	GetNetwork(c *gin.Context, networkId string)
	// Update a network
	// (PUT /api/v1/networks/{networkId})
	UpdateNetwork(c *gin.Context, networkId string)
	// List all rules
	// (GET /api/v1/rules)
	ListRule(c *gin.Context, params ListRuleParams)
	// createRule
	// (POST /api/v1/rules)
	CreateRule(c *gin.Context)
	// deleteRule
	// (DELETE /api/v1/rules/{id})
	DeleteRule(c *gin.Context, id string)
	// 更改用户密码
	// (POST /api/v1/users/change-password)
	ChangePassword(c *gin.Context)
	// 用户登录
	// (POST /api/v1/users/login)
	LoginUser(c *gin.Context)
	// 获取当前用户信息
	// (GET /api/v1/users/me)
	GetUserInfo(c *gin.Context)
	// 用户注册
	// (POST /api/v1/users/register)
	RegisterUser(c *gin.Context)
	// 发送验证码
	// (POST /api/v1/users/send-code)
	SendCode(c *gin.Context)
	// 验证验证码
	// (GET /api/v1/users/verify-code)
	VerifyCode(c *gin.Context, params VerifyCodeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListHost operation middleware
func (siw *ServerInterfaceWrapper) ListHost(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostParams

	// ------------- Optional query parameter "findOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "findOptions", c.Request.URL.Query(), &params.FindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter findOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHost(c, params)
}

// CreateHost operation middleware
func (siw *ServerInterfaceWrapper) CreateHost(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHost(c)
}

// EnrollHost operation middleware
func (siw *ServerInterfaceWrapper) EnrollHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", c.Param("code"), &code, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EnrollHost(c, code)
}

// DeleteHost operation middleware
func (siw *ServerInterfaceWrapper) DeleteHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHost(c, hostId)
}

// GetHost operation middleware
func (siw *ServerInterfaceWrapper) GetHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHost(c, hostId)
}

// UpdateHost operation middleware
func (siw *ServerInterfaceWrapper) UpdateHost(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateHost(c, hostId)
}

// GetHostConfig operation middleware
func (siw *ServerInterfaceWrapper) GetHostConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostConfig(c, hostId)
}

// CreateEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnrollCode(c, hostId)
}

// CheckEnrollCode operation middleware
func (siw *ServerInterfaceWrapper) CheckEnrollCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckEnrollCode(c, hostId)
}

// ListHostRules operation middleware
func (siw *ServerInterfaceWrapper) ListHostRules(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHostRulesParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListHostRules(c, hostId, params)
}

// AddHostRule operation middleware
func (siw *ServerInterfaceWrapper) AddHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddHostRule(c, hostId)
}

// DeleteHostRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteHostRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "hostId" -------------
	var hostId string

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", c.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", c.Param("ruleId"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteHostRule(c, hostId, ruleId)
}

// GetAllNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetAllNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllNetwork(c)
}

// CreateNetwork operation middleware
func (siw *ServerInterfaceWrapper) CreateNetwork(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNetwork(c)
}

// DeleteNetwork operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNetwork(c, networkId)
}

// GetNetwork operation middleware
func (siw *ServerInterfaceWrapper) GetNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetwork(c, networkId)
}

// UpdateNetwork operation middleware
func (siw *ServerInterfaceWrapper) UpdateNetwork(c *gin.Context) {

	var err error

	// ------------- Path parameter "networkId" -------------
	var networkId string

	err = runtime.BindStyledParameterWithOptions("simple", "networkId", c.Param("networkId"), &networkId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter networkId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNetwork(c, networkId)
}

// ListRule operation middleware
func (siw *ServerInterfaceWrapper) ListRule(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRuleParams

	// ------------- Optional query parameter "ruleFindOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "ruleFindOptions", c.Request.URL.Query(), &params.RuleFindOptions)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleFindOptions: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRule(c, params)
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRule(c)
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRule(c, id)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserInfo(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// SendCode operation middleware
func (siw *ServerInterfaceWrapper) SendCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendCode(c)
}

// VerifyCode operation middleware
func (siw *ServerInterfaceWrapper) VerifyCode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyCodeParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyCode(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.ListHost)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.CreateHost)
	router.POST(options.BaseURL+"/api/v1/hosts/enroll/:code", wrapper.EnrollHost)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.DeleteHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.GetHost)
	router.PUT(options.BaseURL+"/api/v1/hosts/:hostId", wrapper.UpdateHost)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/config", wrapper.GetHostConfig)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code", wrapper.CreateEnrollCode)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/enroll-code-check", wrapper.CheckEnrollCode)
	router.GET(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.ListHostRules)
	router.POST(options.BaseURL+"/api/v1/hosts/:hostId/rules", wrapper.AddHostRule)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:hostId/rules/:ruleId", wrapper.DeleteHostRule)
	router.GET(options.BaseURL+"/api/v1/networks", wrapper.GetAllNetwork)
	router.POST(options.BaseURL+"/api/v1/networks", wrapper.CreateNetwork)
	router.DELETE(options.BaseURL+"/api/v1/networks/:networkId", wrapper.DeleteNetwork)
	router.GET(options.BaseURL+"/api/v1/networks/:networkId", wrapper.GetNetwork)
	router.PUT(options.BaseURL+"/api/v1/networks/:networkId", wrapper.UpdateNetwork)
	router.GET(options.BaseURL+"/api/v1/rules", wrapper.ListRule)
	router.POST(options.BaseURL+"/api/v1/rules", wrapper.CreateRule)
	router.DELETE(options.BaseURL+"/api/v1/rules/:id", wrapper.DeleteRule)
	router.POST(options.BaseURL+"/api/v1/users/change-password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/api/v1/users/login", wrapper.LoginUser)
	router.GET(options.BaseURL+"/api/v1/users/me", wrapper.GetUserInfo)
	router.POST(options.BaseURL+"/api/v1/users/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/api/v1/users/send-code", wrapper.SendCode)
	router.GET(options.BaseURL+"/api/v1/users/verify-code", wrapper.VerifyCode)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
